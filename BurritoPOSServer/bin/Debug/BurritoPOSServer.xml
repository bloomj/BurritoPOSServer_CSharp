<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BurritoPOSServer</name>
    </assembly>
    <members>
        <member name="T:BurritoPOSServer.service.Mongo.UserSvcMongoImpl">
            <summary>
            This service implementation uses MongoDB Driver to do basic CRUD operations with MongoDB for Employee objects.
            </summary>
        </member>
        <member name="T:BurritoPOSServer.service.IUserSvc">
            <summary>
            
            </summary>
        </member>
        <member name="T:BurritoPOSServer.service.IService">
            <summary>
            
            </summary>
        </member>
        <member name="M:BurritoPOSServer.service.IUserSvc.storeUser(BurritoPOSServer.domain.User)">
            <summary>
            
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:BurritoPOSServer.service.IUserSvc.getUser(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BurritoPOSServer.service.IUserSvc.deleteUser(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BurritoPOSServer.service.IUserSvc.getAllUsers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:BurritoPOSServer.service.IUserSvc.NAME">
            <summary>
            
            </summary>
        </member>
        <member name="M:BurritoPOSServer.service.Mongo.UserSvcMongoImpl.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:BurritoPOSServer.service.Mongo.UserSvcMongoImpl.getUser(System.Int32)">
            <summary>
            This method retrieves a user.
            </summary>
            <param name="id">Unique ID of user to retrieve</param>
            <returns>user object</returns>
        </member>
        <member name="M:BurritoPOSServer.service.Mongo.UserSvcMongoImpl.storeUser(BurritoPOSServer.domain.User)">
            <summary>
            This method stores a user.
            </summary>
            <param name="u">The user object to store</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:BurritoPOSServer.service.Mongo.UserSvcMongoImpl.deleteUser(System.Int32)">
            <summary>
            This method deletes a user.
            </summary>
            <param name="id">Unique ID of the user to delete</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:BurritoPOSServer.service.Mongo.UserSvcMongoImpl.getAllUsers">
            <summary>
            This method returns all users.
            </summary>
            <returns>List of users objects</returns>
        </member>
        <member name="M:BurritoPOSServer.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:BurritoPOSServer.domain.test.UserTestCase.SetUp">
            <summary>
            
            </summary>
            
        </member>
        <member name="M:BurritoPOSServer.domain.test.UserTestCase.tearDown">
            <summary>
            
            </summary>
            
        </member>
        <member name="T:BurritoPOSServer.service.Hibernate.UserHibernateImpl">
            <summary>
            This service implementation uses NHibernate framework to do basic CRUD operations with MS SQL Server 2008 for User objects.
            </summary>
        </member>
        <member name="T:BurritoPOSServer.service.Hibernate.BaseSvcHibernateImpl">
            <summary>
            This is the base implementation for the Hibernate service classes;
            </summary>
        </member>
        <member name="M:BurritoPOSServer.service.Hibernate.BaseSvcHibernateImpl.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:BurritoPOSServer.service.Hibernate.UserHibernateImpl.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:BurritoPOSServer.service.Hibernate.UserHibernateImpl.getUser(System.Int32)">
            <summary>
            This method retrieves a user.
            </summary>
            <param name="id">Unique ID of user to retrieve</param>
            <returns>user object</returns>
        </member>
        <member name="M:BurritoPOSServer.service.Hibernate.UserHibernateImpl.storeUser(BurritoPOSServer.domain.User)">
            <summary>
            This method stores a user.
            </summary>
            <param name="u">The user object to store</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:BurritoPOSServer.service.Hibernate.UserHibernateImpl.deleteUser(System.Int32)">
            <summary>
            This method deletes a user.
            </summary>
            <param name="id">Unique ID of the user to delete</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:BurritoPOSServer.service.Hibernate.UserHibernateImpl.getAllUsers">
            <summary>
            This method returns all users.
            </summary>
            <returns>List of user objects</returns>
        </member>
        <member name="T:BurritoPOSServer.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BurritoPOSServer.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BurritoPOSServer.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:BurritoPOSServer.service.Factory">
            <summary>
            This class is a service Factory that provides concrete service implementations.
            </summary>
        </member>
        <member name="F:BurritoPOSServer.service.Factory.dLog">
            <summary>
            
            </summary>
        </member>
        <member name="F:BurritoPOSServer.service.Factory.fProperties">
            <summary>
            
            </summary>
        </member>
        <member name="M:BurritoPOSServer.service.Factory.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:BurritoPOSServer.service.Factory.getInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BurritoPOSServer.service.Factory.getService(System.String)">
            <summary>
            This method returns a concrete class based on current configuration
            </summary>
            <param name="name">Name of the service</param>
            <returns>Concrete service class</returns>
        </member>
        <member name="M:BurritoPOSServer.service.Factory.getImplName(System.String)">
            <summary>
            This method gets the required implementation name for service requested.
            </summary>
            <param name="name">Name of service</param>
            <returns>Concrete class to instantiate</returns>
        </member>
        <member name="M:BurritoPOSServer.service.Factory.getUserSvc">
            <summary>
            Static call to Serializable implementation of User service layer
            </summary>
            <returns></returns>
        </member>
        <member name="M:BurritoPOSServer.service.Factory.parse(System.String)">
            <summary>
            This method parses the configuration xml file
            </summary>
            <param name="filePath">File path to configuration xml</param>
        </member>
        <member name="T:BurritoPOSServer.domain.User">
            <summary>
            
            </summary>
        </member>
        <member name="M:BurritoPOSServer.domain.User.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BurritoPOSServer.domain.User.#ctor(System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="_id"></param>
            <param name="_userName"></param>
            <param name="_password"></param>
        </member>
        <member name="M:BurritoPOSServer.domain.User.validate">
            <summary>
            validates the object
            </summary>
            <returns>success or failure</returns>
        </member>
        <member name="M:BurritoPOSServer.domain.User.Equals(System.Object)">
            <summary>
            Checks if the objects are equal
            </summary>
            <returns>success or failure</returns>
        </member>
        <member name="M:BurritoPOSServer.domain.User.GetHashCode">
            <summary>
            Returns base object GetHashCode
            </summary>
            <returns>Unique Hash of Object</returns>
        </member>
        <member name="P:BurritoPOSServer.domain.User.userName">
            <summary>
            User's username
            </summary>
        </member>
        <member name="P:BurritoPOSServer.domain.User.password">
            <summary>
            User's password
            </summary>
        </member>
        <member name="P:BurritoPOSServer.domain.User.id">
            <summary>
            Unique ID of User
            </summary>
        </member>
        <member name="T:BurritoPOSServer.service.test.UserSvcImplTestCase">
            <summary>
            Unit test fixture for user service implementation unit tests
            </summary>
        </member>
        <member name="M:BurritoPOSServer.service.test.UserSvcImplTestCase.SetUp">
            <summary>
            
            </summary>
        </member>
        <member name="M:BurritoPOSServer.service.test.UserSvcImplTestCase.tearDown">
            <summary>
            
            </summary>
        </member>
        <member name="M:BurritoPOSServer.service.test.UserSvcImplTestCase.testStoreUser">
            <summary>
            Unit test for user service implementation
            </summary>
        </member>
        <member name="T:BCrypt">
            <summary>BCrypt implements OpenBSD-style Blowfish password hashing
            using the scheme described in "A Future-Adaptable Password Scheme"
            by Niels Provos and David Mazieres.</summary>
            <remarks>
            <para>This password hashing system tries to thwart offline
            password cracking using a computationally-intensive hashing
            algorithm, based on Bruce Schneier's Blowfish cipher. The work
            factor of the algorithm is parametized, so it can be increased as
            computers get faster.</para>
            <para>To hash a password for the first time, call the
            <c>HashPassword</c> method with a random salt, like this:</para>
            <code>
            string hashed = BCrypt.HashPassword(plainPassword, BCrypt.GenerateSalt());
            </code>
            <para>To check whether a plaintext password matches one that has
            been hashed previously, use the <c>CheckPassword</c> method:</para>
            <code>
            if (BCrypt.CheckPassword(candidatePassword, storedHash)) {
                Console.WriteLine("It matches");
            } else {
                Console.WriteLine("It does not match");
            }
            </code>
            <para>The <c>GenerateSalt</c> method takes an optional parameter
            (logRounds) that determines the computational complexity of the
            hashing:</para>
            <code>
            string strongSalt = BCrypt.GenerateSalt(10);
            string strongerSalt = BCrypt.GenerateSalt(12);
            </code>
            <para>
            The amount of work increases exponentially (2**log_rounds), so
            each increment is twice as much work. The default log_rounds is
            10, and the valid range is 4 to 31.
            </para>
            </remarks>
        </member>
        <member name="M:BCrypt.EncodeBase64(System.Byte[],System.Int32)">
            <summary>Encode a byte array using bcrypt's slightly-modified
            Base64 encoding scheme. Note that this is _not_ compatible
            with the standard MIME-Base64 encoding.</summary>
            <param name="d">The byte array to encode</param>
            <param name="length">The number of bytes to encode</param>
            <returns>A Base64-encoded string</returns>
        </member>
        <member name="M:BCrypt.Char64(System.Char)">
            <summary>Look up the 3 bits base64-encoded by the specified
            character, range-checking against the conversion
            table.</summary>
            <param name="c">The Base64-encoded value</param>
            <returns>The decoded value of <c>x</c></returns>
        </member>
        <member name="M:BCrypt.DecodeBase64(System.String,System.Int32)">
            <summary>Decode a string encoded using BCrypt's Base64 scheme to a
            byte array. Note that this is _not_ compatible with the standard
            MIME-Base64 encoding.</summary>
            <param name="s">The string to decode</param>
            <param name="maximumLength">The maximum number of bytes to decode</param>
            <returns>An array containing the decoded bytes</returns>
        </member>
        <member name="M:BCrypt.Encipher(System.UInt32[],System.Int32)">
            <summary>
            Blowfish encipher a single 64-bit block encoded as two 32-bit
            halves.
            </summary>
            <param name="block">An array containing the two 32-bit half
            blocks.</param>
            <param name="offset">The position in the array of the
            blocks.</param>
        </member>
        <member name="M:BCrypt.StreamToWord(System.Byte[],System.Int32@)">
            <summary>
            Cycically extract a word of key material.
            </summary>
            <param name="data">The string to extract the data
            from.</param>
            <param name="offset">The current offset into data.</param>
            <returns>The next work of material from data.</returns>
        </member>
        <member name="M:BCrypt.InitKey">
            <summary>
            Initialize the Blowfish key schedule.
            </summary>
        </member>
        <member name="M:BCrypt.Key(System.Byte[])">
            <summary>
            Key the Blowfish cipher.
            </summary>
            <param name="key">An array containing the key.</param>
        </member>
        <member name="M:BCrypt.EksKey(System.Byte[],System.Byte[])">
            <summary>
            Perform the "enhanced key schedule" step described by Provos
            and Mazieres in "A Future-Adaptable Password Scheme"
            (http://www.openbsd.org/papers/bcrypt-paper.ps).
            </summary>
            <param name="data">Salt information.</param>
            <param name="key">Password information.</param>
        </member>
        <member name="M:BCrypt.CryptRaw(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Perform the central password hashing step in the bcrypt
            scheme.
            </summary>
            <param name="password">The password to hash.</param>
            <param name="salt">The binary salt to hash with the
            password.</param>
            <param name="logRounds">The binary logarithm of the number of
            rounds of hashing to apply.</param>
            <returns>An array containing the binary hashed password.</returns>
        </member>
        <member name="M:BCrypt.HashPassword(System.String,System.String)">
            <summary>
            Hash a password using the OpenBSD bcrypt scheme.
            </summary>
            <param name="password">The password to hash.</param>
            <param name="salt">The salt to hash with (perhaps generated
            using <c>BCrypt.GenerateSalt</c>).</param>
            <returns>The hashed password.</returns>
        </member>
        <member name="M:BCrypt.GenerateSalt(System.Int32)">
            <summary>
            Generate a salt for use with the BCrypt.HashPassword() method.
            </summary>
            <param name="logRounds">The log2 of the number of rounds of
            hashing to apply. The work factor therefore increases as (2 **
            logRounds).</param>
            <returns>An encoded salt value.</returns>
        </member>
        <member name="M:BCrypt.GenerateSalt">
            <summary>
            Generate a salt for use with the <c>BCrypt.HashPassword()</c>
            method, selecting a reasonable default for the number of hashing
            rounds to apply.
            </summary>
            <returns>An encoded salt value.</returns>
        </member>
        <member name="M:BCrypt.CheckPassword(System.String,System.String)">
            <summary>
            Check that a plaintext password matches a previously hashed
            one.
            </summary>
            <param name="plaintext">The plaintext password to verify.</param>
            <param name="hashed">The previously hashed password.</param>
            <returns><c>true</c> if the passwords, <c>false</c>
            otherwise.</returns>
        </member>
        <member name="T:BCryptTest">
            <summary>NUnit unit tests for BCrypt routines.</summary>
        </member>
        <member name="M:BCryptTest.TestHashPassword">
            <summary>Test method for <c>BCrypt.HashPassword(String,
            String)</c>.</summary>
        </member>
        <member name="M:BCryptTest.TestGenerateSaltInt">
            <summary>Test method for <c>BCrypt.GenerateSalt(int)</c>.</summary>
        </member>
        <member name="M:BCryptTest.TestGenerateSalt">
            <summary>Test method for <c>BCrypt.GenerateSalt()</c>.</summary>
        </member>
        <member name="M:BCryptTest.TestCheckPasswordSuccess">
            <summary>Test method for <c>BCrypt.CheckPassword(String,
            String)</c> expecting success.</summary>
        </member>
        <member name="M:BCryptTest.TestCheckPasswordFailure">
            <summary>Test method for <c>BCrypt.CheckPassword(String,
            String)</c> expecting failure.</summary>
        </member>
        <member name="T:BurritoPOSServer.business.ConnectionManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:BurritoPOSServer.business.ConnectionManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BurritoPOSServer.business.ConnectionManager.startServer">
            <summary>
            
            </summary>
        </member>
        <member name="T:BurritoPOSServer.business.SocketManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:BurritoPOSServer.business.SocketManager.#ctor(System.Net.Sockets.Socket)">
            <summary>
            
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:BurritoPOSServer.business.SocketManager.#ctor(System.Net.Sockets.Socket,BurritoPOSServer.business.ConnectionManager)">
            <summary>
            
            </summary>
            <param name="socket"></param>
            <param name="_par"></param>
        </member>
        <member name="M:BurritoPOSServer.business.SocketManager.setDefaults">
            <summary>
            
            </summary>
        </member>
        <member name="T:BurritoPOSServer.presentation.MainUI">
            <summary>
            
            </summary>
        </member>
        <member name="M:BurritoPOSServer.presentation.MainUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:BurritoPOSServer.presentation.MainUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BurritoPOSServer.presentation.MainUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BurritoPOSServer.presentation.MainUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BurritoPOSServer.presentation.StatusUI">
            <summary>
            
            </summary>
        </member>
        <member name="M:BurritoPOSServer.presentation.StatusUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BurritoPOSServer.presentation.StatusUI.updateStatus(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:BurritoPOSServer.presentation.StatusUI.OnStatusUpdate(System.Object,BurritoPOSServer.presentation.MessageArgs)">
            <summary>
            Updates statusMsgs listbox with status from child threads
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BurritoPOSServer.presentation.StatusUI.Window_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:BurritoPOSServer.presentation.StatusUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BurritoPOSServer.presentation.StatusUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BurritoPOSServer.presentation.StatusUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BurritoPOSServer.presentation.MessageArgs">
            <summary>
            Class used to hold EventArgs to pass status messages back to UI
            </summary>
        </member>
        <member name="M:BurritoPOSServer.presentation.MessageArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="_msg">Status Message</param>
        </member>
        <member name="P:BurritoPOSServer.presentation.MessageArgs.msg">
            <summary>
            Status Message to display in UI
            </summary>
        </member>
        <member name="T:BurritoPOSServer.business.test.ConnectionManagerTestCase">
            <summary>
            Unit test fixture for ConnectionManager / SocketManager unit tests
            </summary>
        </member>
        <member name="M:BurritoPOSServer.business.test.ConnectionManagerTestCase.SetUp">
            <summary>
            
            </summary>
        </member>
        <member name="M:BurritoPOSServer.business.test.ConnectionManagerTestCase.tearDown">
            <summary>
            
            </summary>
        </member>
        <member name="M:BurritoPOSServer.business.test.ConnectionManagerTestCase.testConnectionManager">
            <summary>
            Unit test for ConnectionManager
            </summary>
        </member>
        <member name="M:BurritoPOSServer.business.test.ConnectionManagerTestCase.testImproperShutdown">
            <summary>
            Unit test for ConnectionManager improper shutdown
            </summary>
        </member>
        <member name="M:BurritoPOSServer.business.test.ConnectionManagerTestCase.testSocketManager">
            <summary>
            Unit test for SocketManager
            </summary>
        </member>
    </members>
</doc>
